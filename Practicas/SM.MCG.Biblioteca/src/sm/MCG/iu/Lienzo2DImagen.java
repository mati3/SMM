/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.MCG.iu;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 * Clase Lienzo2DImagen hereda de Lienzo2D, representa una imagen con todas las propiedades del lienzo.
 * @author mati
 */
public class Lienzo2DImagen extends Lienzo2D {

    /**
     * Creates new form Lienzo2DImagen.
     */
    public Lienzo2DImagen() {
        initComponents();
        img = new BufferedImage(WIDTH, HEIGHT, HEIGHT); // arreglar
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Setter de la imagen, manda al lienzo el ancho y el alto de la imagen, para poder crear un marco y que no se pueda pintar fuera de la imagen.
     * @param img, La imagen a tratar.
     */
    public void setImage(BufferedImage img){
        this.img = img;
        if(img!=null) {
            setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
            this.setAncho(img.getWidth());
            this.setAlto(img.getHeight());
        }
    }
    
    /**
     * Getter de la imagen.
     * @return BufferedImage, La imagen a tratar.
     */
    public BufferedImage getImage(){
        return img;
    }
    
    /**
     * Getter de la imagen cuando la queremos guardar.
     * @param drawVector, booleano que nos dice si guardamos la imagen o no.
     * @return La imagen a tratar.
     */
    public BufferedImage getImage(boolean drawVector){ //para guardar
        if (drawVector) {
            BufferedImage imgout;
            if(img.getType()==0){//canal alpha activo, ponermos el tipo
                imgout = new BufferedImage(img.getWidth(),img.getHeight(),BufferedImage.TYPE_INT_ARGB);
            }else{
                imgout = new BufferedImage(img.getWidth(),img.getHeight(),img.getType());
            }
            Graphics2D g = imgout.createGraphics();
            this.setGuardar(true);
            this.paint(g);
            return imgout;
        }
        else
        return getImage();
    }
    
    /**
     * Genera los componentes del grafico.
     * @param g, el grafico para generar los componentes.
     */
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        if(img!=null) g.drawImage(img,0,0,this);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    BufferedImage img;


}
