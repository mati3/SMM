/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.MCG.iu;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import sm.MCG.graficos.MLinea;

/**
 *
 * @author mati
 */
public class Lienzo2D extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo
     */
    public Lienzo2D() {
        initComponents();
        pAux = new Point(-500,-500);
        color = Color.BLACK;
        dibujo = Dibujo.enum_punto;
        relleno = Boolean.FALSE;
        vShape = new ArrayList();
        trazo_grosor = new BasicStroke(2);
        composicion = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f);
        render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
        mover = Boolean.FALSE; 
        compo = Boolean.FALSE; 
        rend = Boolean.FALSE; 
        grosor = 2 ;
        shapeaux = null ;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        pAux = evt.getPoint();
        repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
            pAux = evt.getPoint();
        if(mover){
            if(this.getSelectedShape(evt.getPoint())!=null) 
                shapeaux = this.getSelectedShape(evt.getPoint());
        }else{
            createShape(evt);
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        formMouseDragged(evt);
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(mover){
            if(shapeaux !=null) 
               setLocationM(shapeaux, evt.getPoint());
        }else{
            updateShape(evt);
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved

    }//GEN-LAST:event_formMouseMoved

    @Override
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        g2d.setPaint(color);
        g2d.setStroke(trazo_grosor);
        g2d.setComposite(composicion);
        g2d.setRenderingHints(render);
        
        for(Shape s:vShape) {
            g2d.draw(s);
            if(relleno){ 
                g2d.fill(s);
            
            }
        }
    }
    
    //color
    public void setColor(Color color){
        this.color = color;
        repaint();
    }
    public Color getColor(){
        return color;
    }
    
    //dibujo
    public void setDibujo(Enum enumerado){
        this.dibujo = enumerado;
    }
    public Enum getDibujo(){
        return dibujo;
    }
    
    //relleno
    public void setRelleno(Boolean booleano){
        this.relleno = booleano;
        repaint();
    }
    public boolean getRelleno(){
        return relleno;
    }
    
    //grosor
    public void setStroke(int nuevo){
        Stroke aux = new BasicStroke(nuevo);
        trazo_grosor = aux;
        grosor = nuevo ;
        repaint();
    }
    public int getStroke(){
        return grosor;
    }
    
    //transparencia
    public boolean getCompo(){
        return compo;
    }
    public void setComposicion(boolean transparencia){
        if(transparencia){
            composicion = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f);
        }else{
            composicion =  AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f);
        }
        compo = transparencia;
        repaint();
    }
    
    //alisar
    public boolean getRender(){
        return rend;
    }
    public void setRender(boolean alisar){
        if(alisar){
            render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        }else{
            render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
        }
        rend = alisar ;
        repaint();
    }
    
    //mover
    public Boolean getEditar(){
        return mover;
    }
    public void setEditar(boolean editar){
        mover = editar ;
    }
    
    //modularizaci√≥n
    private Shape getSelectedShape(Point2D p){
        for(Shape s:vShape)
            if(s.contains(p)) return s;
        return null;
    }
    
    private void setLocationM(Shape s, Point2D pos){
        if(s instanceof MLinea){
            ((MLinea)s).setLocation(pos);
        }else if(s instanceof Rectangle){
            ((Rectangle)s).setLocation((Point)pos);
        }else if(s instanceof Ellipse2D){
           ((Ellipse2D)s).setFrame(pos.getX(), pos.getY(), ((Ellipse2D)s).getWidth(), ((Ellipse2D)s).getHeight());
        }
    }
    
    private void createShape(MouseEvent evt){
        if(this.dibujo == Dibujo.enum_punto){
            shape = new MLinea(evt.getPoint(), evt.getPoint());
            vShape.add(shape); 
        }else if(this.dibujo==Dibujo.enum_linea){
            shape = new MLinea(evt.getPoint(), evt.getPoint());
            vShape.add(shape);
        }else if(this.dibujo==Dibujo.enum_rectangulo){
            shape = new Rectangle(evt.getPoint()); 
            vShape.add(shape);
        }else if(this.dibujo == Dibujo.enum_elipse){
            shape = new Ellipse2D.Double(evt.getPoint().x,evt.getPoint().y,evt.getPoint().x,evt.getPoint().y);
            vShape.add(shape); 
        }
    }
    
    private void updateShape(MouseEvent evt){
        if(this.dibujo==Dibujo.enum_linea){
            ((MLinea)shape).setLine(((MLinea)shape).getP1(), evt.getPoint());
        }else if (this.dibujo==Dibujo.enum_rectangulo){
            ((Rectangle)shape).setFrameFromDiagonal(pAux, evt.getPoint());
        }else if(this.dibujo == Dibujo.enum_elipse){
            ((Ellipse2D)shape).setFrameFromDiagonal(pAux, evt.getPoint());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private Point2D pAux;
    private Color color ;
    private Enum dibujo ;
    private Boolean relleno,compo, rend, mover;
    private ArrayList<Shape> vShape;
    private Stroke trazo_grosor;
    private Composite composicion;
    private RenderingHints render;
    private int grosor ;
    private Shape shapeaux, shape;
}
