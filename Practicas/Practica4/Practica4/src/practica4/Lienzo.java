/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica4;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;

/**
 *
 * @author chipi
 */
public class Lienzo extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        punto = new Point(-500,-500);
        lineaA = new Point(-500,-500);
        lineaB = new Point(-500,-500);
        color = Color.BLACK;
        dibujo = Dibujo.enum_punto;
        relleno = Boolean.FALSE;
    }
    
    public void limpiar_lienzo(){
        punto = new Point(-500,-500);
        lineaA = new Point(-500,-500);
        lineaB = new Point(-500,-500);
        color = Color.BLACK;
        dibujo = Dibujo.enum_punto;
        relleno = Boolean.FALSE;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        punto = evt.getPoint();
        repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        lineaA = evt.getPoint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if(evt.getPoint()!=lineaA){
            lineaB=evt.getPoint();
             repaint();
        }
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(evt.getPoint()!=lineaA){
            lineaB=evt.getPoint();
             repaint();
        }
    }//GEN-LAST:event_formMouseDragged

    public void paint(Graphics g){
        super.paint(g);
        g.setColor(color);
        if(dibujo==Dibujo.enum_punto){
           g.fillOval(punto.x-10,punto.y-10,20,20);
        }else if(dibujo==Dibujo.enum_linea){
           g.drawLine(lineaA.x, lineaA.y, lineaB.x, lineaB.y);
        }else if(dibujo==Dibujo.enum_rectangulo){
            if(lineaA.x<lineaB.x && lineaA.y<lineaB.y){
                g.drawRect(lineaA.x, lineaA.y,lineaB.x-lineaA.x,lineaB.y-lineaA.y);
            }else if(lineaA.x<lineaB.x && lineaA.y>lineaB.y){
                g.drawRect(lineaA.x,lineaB.y,lineaB.x-lineaA.x,lineaA.y-lineaB.y);
            }else if(lineaA.x>lineaB.x && lineaA.y<lineaB.y){
                g.drawRect(lineaB.x,lineaA.y,lineaA.x-lineaB.x,lineaB.y-lineaA.y);
            }else if(lineaA.x>lineaB.x && lineaA.y>lineaB.y){
                g.drawRect(lineaB.x,lineaB.y,lineaA.x-lineaB.x,lineaA.y-lineaB.y);
            }
            if(relleno==true){
                if(lineaA.x<lineaB.x && lineaA.y<lineaB.y){
                    g.fillRect(lineaA.x, lineaA.y,lineaB.x-lineaA.x,lineaB.y-lineaA.y);
                }else if(lineaA.x<lineaB.x && lineaA.y>lineaB.y){
                    g.fillRect(lineaA.x,lineaB.y,lineaB.x-lineaA.x,lineaA.y-lineaB.y);
                }else if(lineaA.x>lineaB.x && lineaA.y<lineaB.y){
                    g.fillRect(lineaB.x,lineaA.y,lineaA.x-lineaB.x,lineaB.y-lineaA.y);
                }else if(lineaA.x>lineaB.x && lineaA.y>lineaB.y){
                    g.fillRect(lineaB.x,lineaB.y,lineaA.x-lineaB.x,lineaA.y-lineaB.y);
                }
            }
        }else if(dibujo==Dibujo.enum_elipse){
            if(lineaA.x<lineaB.x && lineaA.y<lineaB.y){
                g.drawOval(lineaA.x, lineaA.y,lineaB.x-lineaA.x,lineaB.y-lineaA.y);
            }else if(lineaA.x<lineaB.x && lineaA.y>lineaB.y){
                g.drawOval(lineaA.x,lineaB.y,lineaB.x-lineaA.x,lineaA.y-lineaB.y);
            }else if(lineaA.x>lineaB.x && lineaA.y<lineaB.y){
                g.drawOval(lineaB.x,lineaA.y,lineaA.x-lineaB.x,lineaB.y-lineaA.y);
            }else if(lineaA.x>lineaB.x && lineaA.y>lineaB.y){
                g.drawOval(lineaB.x,lineaB.y,lineaA.x-lineaB.x,lineaA.y-lineaB.y);
            }
            if(relleno==true){
                if(lineaA.x<lineaB.x && lineaA.y<lineaB.y){
                    g.fillOval(lineaA.x, lineaA.y,lineaB.x-lineaA.x,lineaB.y-lineaA.y);
                }else if(lineaA.x<lineaB.x && lineaA.y>lineaB.y){
                    g.fillOval(lineaA.x,lineaB.y,lineaB.x-lineaA.x,lineaA.y-lineaB.y);
                }else if(lineaA.x>lineaB.x && lineaA.y<lineaB.y){
                    g.fillOval(lineaB.x,lineaA.y,lineaA.x-lineaB.x,lineaB.y-lineaA.y);
                }else if(lineaA.x>lineaB.x && lineaA.y>lineaB.y){
                    g.fillOval(lineaB.x,lineaB.y,lineaA.x-lineaB.x,lineaA.y-lineaB.y);
                }
            }
        }
    }
    public void setColor(Color color){
        this.color = color;
    }
    public Color getColor(){
        return color;
    }
    
    public void setDibujo(Enum enumerado){
        this.dibujo = enumerado;
    }
    public Enum getDibujo(){
        return dibujo;
    }
    
    public void setRelleno(Boolean booleano){
        this.relleno = booleano;
    }
    public Boolean getRelleno(){
        return relleno;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private Point punto, lineaA, lineaB;
    private Color color ;
    private Enum dibujo ;
    private Boolean relleno ;
}
