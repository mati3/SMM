/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicafinalsmm;

import com.sun.prism.BasicStroke;
import sm.MCG.iu.Dibujo;
import java.awt.Color;
import java.awt.Image;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;

import static java.lang.Math.abs;
import static java.lang.Math.sin;
import static java.lang.Math.toRadians;
import javax.imageio.ImageIO;
import javax.media.Buffer;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JFileChooser;
import sm.MCG.imagen.MlookupOp;
import sm.MCG.imagen.PropioCC;
import sm.MCG.imagen.PropioPP;
import sm.MCG.imagen.SepiaOp;
import sm.MCG.imagen.UmbralizacionOp;
import sm.MCG.imagen.utilities;
import sm.MCG.iu.MyCellRenderer;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author chipi
 */
public class VentanaFinal extends javax.swing.JFrame {

    /**
     * Creates new form Ventana7
     */
    public VentanaFinal() {
        initComponents();
        util= new utilities();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        nuevo_doc = new javax.swing.JButton();
        abrir_doc = new javax.swing.JButton();
        guardar_doc = new javax.swing.JButton();
        lapiz = new javax.swing.JToggleButton();
        linea = new javax.swing.JToggleButton();
        rectangulo = new javax.swing.JToggleButton();
        ovalo = new javax.swing.JToggleButton();
        curva = new javax.swing.JToggleButton();
        trazoLibre = new javax.swing.JToggleButton();
        areaLuna = new javax.swing.JToggleButton();
        mover = new javax.swing.JToggleButton();
        Color c[]= {Color.BLACK, Color.RED,Color.BLUE,Color.WHITE,Color.YELLOW,Color.GREEN};
        colores = new javax.swing.JComboBox<>(c);
        grosor = new javax.swing.JSpinner();
        discontinuidad = new javax.swing.JComboBox<>();
        SliderPatronDiscontinuidad = new javax.swing.JSlider();
        relleno = new javax.swing.JToggleButton();
        transparencia = new javax.swing.JToggleButton();
        gradoTransparencia = new javax.swing.JSlider();
        alisar = new javax.swing.JToggleButton();
        playSonido = new javax.swing.JButton();
        stopSonido = new javax.swing.JButton();
        listaReproduccion = new javax.swing.JComboBox<>();
        grabarSonido = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        camara = new javax.swing.JButton();
        captura = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        etiqueta_barra_menu = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        jPanel11 = new javax.swing.JPanel();
        Filtros = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        deslizador_brillo = new javax.swing.JSlider();
        jPanel12 = new javax.swing.JPanel();
        contraste = new javax.swing.JButton();
        iluminacion = new javax.swing.JButton();
        oscurecer = new javax.swing.JButton();
        binariza = new javax.swing.JButton();
        posteriza = new javax.swing.JButton();
        Negativo = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        sepia = new javax.swing.JButton();
        propiapp = new javax.swing.JButton();
        tintado = new javax.swing.JButton();
        ecualizador = new javax.swing.JButton();
        propiocc = new javax.swing.JButton();
        seno = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        extraccion_bandas = new javax.swing.JButton();
        espacios_de_color = new javax.swing.JComboBox<>();
        jPanel15 = new javax.swing.JPanel();
        aumentar_Escala = new javax.swing.JButton();
        disminuir_Escala = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        slider_rotacion = new javax.swing.JSlider();
        rotacion90 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        rotacion270 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        Slider_umbralizacion = new javax.swing.JSlider();
        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        duplicar = new javax.swing.JMenuItem();
        grabaAudio = new javax.swing.JMenuItem();
        edicion = new javax.swing.JMenu();
        barra_estado = new javax.swing.JCheckBoxMenuItem();
        barra_formas = new javax.swing.JCheckBoxMenuItem();
        barra_atributos = new javax.swing.JCheckBoxMenuItem();
        imagen = new javax.swing.JMenu();
        resacaleOP = new javax.swing.JMenuItem();
        convolveOP = new javax.swing.JMenuItem();
        affine_transfor_Op = new javax.swing.JMenuItem();
        lookup_Op = new javax.swing.JMenuItem();
        band_conbine_Op = new javax.swing.JMenuItem();
        color_convert_op = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar1.setRollover(true);

        nuevo_doc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/nuevo.png"))); // NOI18N
        nuevo_doc.setToolTipText("nuevo");
        nuevo_doc.setFocusable(false);
        nuevo_doc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevo_doc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevo_doc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevo_docActionPerformed(evt);
            }
        });
        jToolBar1.add(nuevo_doc);

        abrir_doc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/abrir.png"))); // NOI18N
        abrir_doc.setToolTipText("abrir");
        abrir_doc.setFocusable(false);
        abrir_doc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrir_doc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrir_doc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrir_docActionPerformed(evt);
            }
        });
        jToolBar1.add(abrir_doc);

        guardar_doc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/guardar.png"))); // NOI18N
        guardar_doc.setToolTipText("guardar");
        guardar_doc.setFocusable(false);
        guardar_doc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardar_doc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardar_doc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_docActionPerformed(evt);
            }
        });
        jToolBar1.add(guardar_doc);

        lapiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/punto.png"))); // NOI18N
        lapiz.setToolTipText("punto");
        lapiz.setFocusable(false);
        lapiz.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lapiz.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lapiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lapizActionPerformed(evt);
            }
        });
        jToolBar1.add(lapiz);

        linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/linea.png"))); // NOI18N
        linea.setToolTipText("linea");
        linea.setFocusable(false);
        linea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        linea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaActionPerformed(evt);
            }
        });
        jToolBar1.add(linea);

        rectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/rectangulo.png"))); // NOI18N
        rectangulo.setToolTipText("rectangulo");
        rectangulo.setFocusable(false);
        rectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloActionPerformed(evt);
            }
        });
        jToolBar1.add(rectangulo);

        ovalo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/elipse.png"))); // NOI18N
        ovalo.setToolTipText("elipse");
        ovalo.setFocusable(false);
        ovalo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ovalo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ovalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovaloActionPerformed(evt);
            }
        });
        jToolBar1.add(ovalo);

        curva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/curva.png"))); // NOI18N
        curva.setToolTipText("curva");
        curva.setFocusable(false);
        curva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        curva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        curva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                curvaActionPerformed(evt);
            }
        });
        jToolBar1.add(curva);

        trazoLibre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/Lapiz.gif"))); // NOI18N
        trazoLibre.setToolTipText("trazo libre");
        trazoLibre.setFocusable(false);
        trazoLibre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        trazoLibre.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        trazoLibre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trazoLibreActionPerformed(evt);
            }
        });
        jToolBar1.add(trazoLibre);

        areaLuna.setText("AreaLuna");
        areaLuna.setToolTipText("clipPropio");
        areaLuna.setFocusable(false);
        areaLuna.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        areaLuna.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        areaLuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaLunaActionPerformed(evt);
            }
        });
        jToolBar1.add(areaLuna);

        mover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/seleccion.png"))); // NOI18N
        mover.setToolTipText("editar");
        mover.setFocusable(false);
        mover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        mover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moverActionPerformed(evt);
            }
        });
        jToolBar1.add(mover);

        colores.setRenderer(new MyCellRenderer());
        colores.setModel(new javax.swing.DefaultComboBoxModel<>(c));
        colores.setToolTipText("colores");
        colores.setMaximumSize(new java.awt.Dimension(73, 42));
        colores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coloresActionPerformed(evt);
            }
        });
        jToolBar1.add(colores);

        grosor.setModel(new javax.swing.SpinnerNumberModel(2, 1, null, 1));
        grosor.setToolTipText("grosor");
        grosor.setMaximumSize(new java.awt.Dimension(45, 33));
        grosor.setMinimumSize(new java.awt.Dimension(45, 33));
        grosor.setPreferredSize(new java.awt.Dimension(40, 33));
        grosor.setValue(2);
        grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorStateChanged(evt);
            }
        });
        jToolBar1.add(grosor);

        discontinuidad.setMaximumRowCount(4);
        discontinuidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "continua", "punteadas redonda", "punteadas cuadrada", "punteadas a tope" }));
        discontinuidad.setToolTipText("tipo de continuidad del trazo");
        discontinuidad.setMaximumSize(new java.awt.Dimension(73, 42));
        discontinuidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discontinuidadActionPerformed(evt);
            }
        });
        jToolBar1.add(discontinuidad);

        SliderPatronDiscontinuidad.setMaximum(50);
        SliderPatronDiscontinuidad.setMinimum(1);
        SliderPatronDiscontinuidad.setValue(15);
        SliderPatronDiscontinuidad.setMaximumSize(new java.awt.Dimension(60, 26));
        SliderPatronDiscontinuidad.setPreferredSize(new java.awt.Dimension(60, 26));
        SliderPatronDiscontinuidad.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderPatronDiscontinuidadStateChanged(evt);
            }
        });
        jToolBar1.add(SliderPatronDiscontinuidad);

        relleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/rellenar.png"))); // NOI18N
        relleno.setToolTipText("relleno");
        relleno.setFocusable(false);
        relleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        relleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        relleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoActionPerformed(evt);
            }
        });
        jToolBar1.add(relleno);

        transparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/transparencia.png"))); // NOI18N
        transparencia.setToolTipText("transparencia");
        transparencia.setFocusable(false);
        transparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparenciaActionPerformed(evt);
            }
        });
        jToolBar1.add(transparencia);

        gradoTransparencia.setToolTipText("slider grado transparencia");
        gradoTransparencia.setMaximumSize(new java.awt.Dimension(120, 26));
        gradoTransparencia.setMinimumSize(new java.awt.Dimension(120, 26));
        gradoTransparencia.setPreferredSize(new java.awt.Dimension(120, 26));
        gradoTransparencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gradoTransparenciaStateChanged(evt);
            }
        });
        jToolBar1.add(gradoTransparencia);

        alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/alisar.png"))); // NOI18N
        alisar.setToolTipText("alisar");
        alisar.setFocusable(false);
        alisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisarActionPerformed(evt);
            }
        });
        jToolBar1.add(alisar);

        playSonido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPracticaSonido/play24x24.png"))); // NOI18N
        playSonido.setToolTipText("play");
        playSonido.setFocusable(false);
        playSonido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playSonido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSonidoActionPerformed(evt);
            }
        });
        jToolBar1.add(playSonido);

        stopSonido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPracticaSonido/stop24x24.png"))); // NOI18N
        stopSonido.setToolTipText("stop");
        stopSonido.setFocusable(false);
        stopSonido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopSonido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSonidoActionPerformed(evt);
            }
        });
        jToolBar1.add(stopSonido);

        listaReproduccion.setModel(new javax.swing.DefaultComboBoxModel<>(new File[] {}));
        listaReproduccion.setToolTipText("lista de reproduccion audio");
        listaReproduccion.setMaximumSize(new java.awt.Dimension(84, 22));
        jToolBar1.add(listaReproduccion);

        grabarSonido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPracticaSonido/record24x24.png"))); // NOI18N
        grabarSonido.setToolTipText("grabar audio");
        grabarSonido.setFocusable(false);
        grabarSonido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        grabarSonido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        grabarSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarSonidoActionPerformed(evt);
            }
        });
        jToolBar1.add(grabarSonido);

        jLabel1.setText("00:00");
        jLabel1.setToolTipText("temporizador audio");
        jToolBar1.add(jLabel1);

        camara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPracticaVideo/Camara.png"))); // NOI18N
        camara.setToolTipText("camara");
        camara.setFocusable(false);
        camara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        camara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        camara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camaraActionPerformed(evt);
            }
        });
        jToolBar1.add(camara);

        captura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPracticaVideo/Capturar.png"))); // NOI18N
        captura.setToolTipText("captura imagen del video");
        captura.setFocusable(false);
        captura.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        captura.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        captura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capturaActionPerformed(evt);
            }
        });
        jToolBar1.add(captura);

        jPanel1.add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1654, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        etiqueta_barra_menu.setText("Etiqueta de barra de menu");
        jPanel4.add(etiqueta_barra_menu);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setPreferredSize(new java.awt.Dimension(858, 125));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        jToolBar3.setRollover(true);

        jPanel11.setBackground(new java.awt.Color(204, 204, 204));
        jPanel11.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        jPanel11.setMaximumSize(new java.awt.Dimension(200, 125));

        Filtros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Emborronamiento media", "Emboronamiento binomial", "Enfoque", "Relieve", "Fronteras laplaciano", "Expe" }));
        Filtros.setToolTipText("filtros");
        Filtros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(Filtros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(Filtros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jToolBar3.add(jPanel11);

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        jPanel6.setMaximumSize(new java.awt.Dimension(214, 125));
        jPanel6.setMinimumSize(new java.awt.Dimension(214, 65));
        jPanel6.setRequestFocusEnabled(false);

        deslizador_brillo.setMaximum(255);
        deslizador_brillo.setMinimum(-255);
        deslizador_brillo.setToolTipText("brillo");
        deslizador_brillo.setValue(0);
        deslizador_brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                deslizador_brilloStateChanged(evt);
            }
        });
        deslizador_brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deslizador_brilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                deslizador_brilloFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(deslizador_brillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(deslizador_brillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jToolBar3.add(jPanel6);

        jPanel12.setBackground(new java.awt.Color(204, 204, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"), new javax.swing.border.MatteBorder(null)));
        jPanel12.setMaximumSize(new java.awt.Dimension(250, 125));
        jPanel12.setMinimumSize(new java.awt.Dimension(250, 125));
        jPanel12.setPreferredSize(new java.awt.Dimension(250, 125));

        contraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/contraste.png"))); // NOI18N
        contraste.setToolTipText("contraste");
        contraste.setMargin(new java.awt.Insets(1, 10, 1, 10));
        contraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteActionPerformed(evt);
            }
        });

        iluminacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/iluminar.png"))); // NOI18N
        iluminacion.setToolTipText("ilumina");
        iluminacion.setMargin(new java.awt.Insets(1, 10, 1, 10));
        iluminacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminacionActionPerformed(evt);
            }
        });

        oscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/oscurecer.png"))); // NOI18N
        oscurecer.setToolTipText("oscurece");
        oscurecer.setMargin(new java.awt.Insets(1, 10, 1, 10));
        oscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecerActionPerformed(evt);
            }
        });

        binariza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/binariza.png"))); // NOI18N
        binariza.setToolTipText("binariza");
        binariza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarizaActionPerformed(evt);
            }
        });

        posteriza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/posteriza.png"))); // NOI18N
        posteriza.setToolTipText("posteriza");
        posteriza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posterizaActionPerformed(evt);
            }
        });

        Negativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/negativo.png"))); // NOI18N
        Negativo.setToolTipText("negativo");
        Negativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(contraste)
                        .addGap(18, 18, 18)
                        .addComponent(oscurecer))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(iluminacion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(posteriza, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(binariza, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Negativo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(binariza, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(oscurecer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contraste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(iluminacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(posteriza, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(Negativo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jToolBar3.add(jPanel12);

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));
        jPanel13.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("f_Seno"), new javax.swing.border.MatteBorder(null)));
        jPanel13.setMaximumSize(new java.awt.Dimension(280, 125));
        jPanel13.setMinimumSize(new java.awt.Dimension(280, 125));
        jPanel13.setPreferredSize(new java.awt.Dimension(280, 125));

        sepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/sepia.png"))); // NOI18N
        sepia.setToolTipText("sepia");
        sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaActionPerformed(evt);
            }
        });

        propiapp.setText("Propio pp");
        propiapp.setToolTipText("diseño propio pixel a pixel");
        propiapp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propiappActionPerformed(evt);
            }
        });

        tintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/tintar.png"))); // NOI18N
        tintado.setToolTipText("tintado");
        tintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tintadoActionPerformed(evt);
            }
        });

        ecualizador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/ecualizar.png"))); // NOI18N
        ecualizador.setToolTipText("ecualizador");
        ecualizador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecualizadorActionPerformed(evt);
            }
        });

        propiocc.setText("Propio cc");
        propiocc.setToolTipText("diseño propio comp. a comp");
        propiocc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propioccActionPerformed(evt);
            }
        });

        seno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/sinusoidal.png"))); // NOI18N
        seno.setToolTipText("seno");
        seno.setFocusable(false);
        seno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        seno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        seno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sepia)
                .addGap(18, 18, 18)
                .addComponent(tintado)
                .addGap(18, 18, 18)
                .addComponent(ecualizador)
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(seno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propiapp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(propiocc)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(propiapp)
                        .addComponent(propiocc))
                    .addComponent(seno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ecualizador)
                    .addComponent(tintado)
                    .addComponent(sepia))
                .addContainerGap())
        );

        jToolBar3.add(jPanel13);

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));
        jPanel7.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Color"), new javax.swing.border.MatteBorder(null)));
        jPanel7.setMaximumSize(new java.awt.Dimension(150, 125));
        jPanel7.setMinimumSize(new java.awt.Dimension(150, 125));
        jPanel7.setPreferredSize(new java.awt.Dimension(150, 125));

        extraccion_bandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/bandas.png"))); // NOI18N
        extraccion_bandas.setToolTipText("bandas");
        extraccion_bandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraccion_bandasActionPerformed(evt);
            }
        });

        espacios_de_color.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        espacios_de_color.setToolTipText("espacios de color");
        espacios_de_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espacios_de_colorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(extraccion_bandas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(espacios_de_color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(espacios_de_color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extraccion_bandas))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        jToolBar3.add(jPanel7);

        jPanel15.setBackground(new java.awt.Color(204, 204, 204));
        jPanel15.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Escala"), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        jPanel15.setMaximumSize(new java.awt.Dimension(79, 125));
        jPanel15.setMinimumSize(new java.awt.Dimension(79, 125));
        jPanel15.setPreferredSize(new java.awt.Dimension(79, 125));

        aumentar_Escala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/aumentar.png"))); // NOI18N
        aumentar_Escala.setToolTipText("aumenta");
        aumentar_Escala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentar_EscalaActionPerformed(evt);
            }
        });

        disminuir_Escala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/disminuir.png"))); // NOI18N
        disminuir_Escala.setToolTipText("disminulle");
        disminuir_Escala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuir_EscalaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(disminuir_Escala)
                    .addComponent(aumentar_Escala))
                .addGap(0, 16, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aumentar_Escala)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(disminuir_Escala)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jToolBar3.add(jPanel15);

        jPanel14.setBackground(new java.awt.Color(204, 204, 204));
        jPanel14.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"), new javax.swing.border.MatteBorder(null)));
        jPanel14.setMaximumSize(new java.awt.Dimension(230, 125));
        jPanel14.setMinimumSize(new java.awt.Dimension(230, 125));
        jPanel14.setPreferredSize(new java.awt.Dimension(230, 125));

        slider_rotacion.setMaximum(360);
        slider_rotacion.setToolTipText("rotacion");
        slider_rotacion.setValue(0);
        slider_rotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_rotacionStateChanged(evt);
            }
        });
        slider_rotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                slider_rotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                slider_rotacionFocusLost(evt);
            }
        });

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/rotacion90.png"))); // NOI18N
        rotacion90.setToolTipText("rotacion 90");
        rotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90ActionPerformed(evt);
            }
        });

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/rotacion180.png"))); // NOI18N
        rotacion180.setToolTipText("rotacion 180");
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });

        rotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPractica10/rotacion270.png"))); // NOI18N
        rotacion270.setToolTipText("rotacion 270");
        rotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(slider_rotacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(rotacion90)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rotacion180)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rotacion270)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(slider_rotacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rotacion90)
                    .addComponent(rotacion180)
                    .addComponent(rotacion270))
                .addGap(21, 21, 21))
        );

        jToolBar3.add(jPanel14);

        jPanel10.setBackground(new java.awt.Color(204, 204, 204));
        jPanel10.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Umbralizacion"), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        jPanel10.setMaximumSize(new java.awt.Dimension(238, 125));

        Slider_umbralizacion.setMaximum(255);
        Slider_umbralizacion.setToolTipText("umbralización");
        Slider_umbralizacion.setValue(128);
        Slider_umbralizacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Slider_umbralizacionStateChanged(evt);
            }
        });
        Slider_umbralizacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Slider_umbralizacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Slider_umbralizacionFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Slider_umbralizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(Slider_umbralizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        jToolBar3.add(jPanel10);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
        );

        jToolBar3.add(jPanel9);

        jPanel5.add(jToolBar3);

        jPanel2.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1754, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        archivo.setText("Archivo");
        archivo.setToolTipText("archivo");

        nuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/nuevo.png"))); // NOI18N
        nuevo.setText("Nuevo");
        nuevo.setToolTipText("nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        archivo.add(nuevo);

        abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/abrir.png"))); // NOI18N
        abrir.setText("Abrir");
        abrir.setToolTipText("abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        archivo.add(abrir);

        guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconos/guardar.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.setToolTipText("guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        archivo.add(guardar);

        duplicar.setText("Duplicar");
        duplicar.setToolTipText("duplicar");
        duplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarActionPerformed(evt);
            }
        });
        archivo.add(duplicar);

        grabaAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica10/iconosPracticaSonido/record24x24.png"))); // NOI18N
        grabaAudio.setText("Grabar audio");
        grabaAudio.setToolTipText("grabar audio");
        grabaAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabaAudioActionPerformed(evt);
            }
        });
        archivo.add(grabaAudio);

        jMenuBar1.add(archivo);

        edicion.setText("Edición");
        edicion.setToolTipText("edicion");

        barra_estado.setSelected(true);
        barra_estado.setText("Ver barra de estado");
        barra_estado.setToolTipText("ver barra de estado");
        barra_estado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barra_estadoActionPerformed(evt);
            }
        });
        edicion.add(barra_estado);

        barra_formas.setSelected(true);
        barra_formas.setText("Ver barra de formas");
        barra_formas.setToolTipText("ver barra de formas");
        barra_formas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barra_formasActionPerformed(evt);
            }
        });
        edicion.add(barra_formas);

        barra_atributos.setSelected(true);
        barra_atributos.setText("Ver barra de atributos");
        barra_atributos.setToolTipText("ver barra de atributos");
        barra_atributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barra_atributosActionPerformed(evt);
            }
        });
        edicion.add(barra_atributos);

        jMenuBar1.add(edicion);

        imagen.setText("Imagen");
        imagen.setToolTipText("imagen");

        resacaleOP.setText("ResacaleOP");
        resacaleOP.setToolTipText("rescaleOp");
        resacaleOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resacaleOPActionPerformed(evt);
            }
        });
        imagen.add(resacaleOP);

        convolveOP.setText("ConvolveOP");
        convolveOP.setToolTipText("ConvolveOP");
        convolveOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolveOPActionPerformed(evt);
            }
        });
        imagen.add(convolveOP);

        affine_transfor_Op.setText("Affine TransformOp");
        affine_transfor_Op.setToolTipText("Affine TransformOp");
        affine_transfor_Op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affine_transfor_OpActionPerformed(evt);
            }
        });
        imagen.add(affine_transfor_Op);

        lookup_Op.setText("LookupOp");
        lookup_Op.setToolTipText("LookupOp");
        lookup_Op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookup_OpActionPerformed(evt);
            }
        });
        imagen.add(lookup_Op);

        band_conbine_Op.setText("BandCombineOp");
        band_conbine_Op.setToolTipText("BandCombineOp");
        band_conbine_Op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                band_conbine_OpActionPerformed(evt);
            }
        });
        imagen.add(band_conbine_Op);

        color_convert_op.setText("ColorConvertOp");
        color_convert_op.setToolTipText("ColorConvertOp");
        color_convert_op.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color_convert_opActionPerformed(evt);
            }
        });
        imagen.add(color_convert_op);

        jMenuBar1.add(imagen);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        externa = new ventana_interna("nuevo", this);
        jDesktopPane1.add(externa);
       
        //crea una nueva imagen ***********************************
        BufferedImage img;
        img = new BufferedImage(300,300,BufferedImage.TYPE_INT_ARGB);
        externa.lienzo1().setImage(img);
        
        externa.setVisible(true);
        externa.setBounds(20, 20, img.getWidth(), img.getHeight());
    }//GEN-LAST:event_nuevoActionPerformed

    private void lapizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lapizActionPerformed
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDibujo(Dibujo.enum_punto);
        etiqueta_barra_menu.setText("Lapiz");
        lapiz.setSelected(true);
        linea.setSelected(false);
        rectangulo.setSelected(false);
        ovalo.setSelected(false);
        mover.setSelected(false);
        areaLuna.setSelected(false);
        trazoLibre.setSelected(false);
        curva.setSelected(false);
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setEditar(false);
    }//GEN-LAST:event_lapizActionPerformed

    private void lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaActionPerformed
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDibujo(Dibujo.enum_linea);
        etiqueta_barra_menu.setText("Linea");
        linea.setSelected(true);
        lapiz.setSelected(false);
        rectangulo.setSelected(false);
        ovalo.setSelected(false);
        mover.setSelected(false);
        areaLuna.setSelected(false);
        trazoLibre.setSelected(false);
        curva.setSelected(false);
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setEditar(false);
    }//GEN-LAST:event_lineaActionPerformed

    private void rectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloActionPerformed
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDibujo(Dibujo.enum_rectangulo);
        etiqueta_barra_menu.setText("Rectangulo");
        rectangulo.setSelected(true);
        linea.setSelected(false);
        lapiz.setSelected(false);
        ovalo.setSelected(false);
        mover.setSelected(false);
        areaLuna.setSelected(false);
        trazoLibre.setSelected(false);
        curva.setSelected(false);
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setEditar(false);
    }//GEN-LAST:event_rectanguloActionPerformed

    private void ovaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovaloActionPerformed
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDibujo(Dibujo.enum_elipse);
        etiqueta_barra_menu.setText("Ovalo");
        ovalo.setSelected(true);
        linea.setSelected(false);
        rectangulo.setSelected(false);
        lapiz.setSelected(false);
        mover.setSelected(false);
        areaLuna.setSelected(false);
        trazoLibre.setSelected(false);
        curva.setSelected(false);
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setEditar(false);
    }//GEN-LAST:event_ovaloActionPerformed

    private void barra_estadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barra_estadoActionPerformed
        if(this.barra_estado.isSelected()){
            this.etiqueta_barra_menu.setVisible(true);
        }else{
            this.etiqueta_barra_menu.setVisible(false);
        }
    }//GEN-LAST:event_barra_estadoActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser dlg = new JFileChooser();                    
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                int i = f.getName().lastIndexOf('.');// indice que nos indica donde empieza la extension
                String sub = f.getName();
                sub.substring(i); //aqui tendriamos la extension
                if(".gif".equals(sub.substring(i)) || ".jpg".equals(sub.substring(i)) || ".png".equals(sub.substring(i)) || ".jpeg".equals(sub.substring(i))){ //graficos
                    BufferedImage img = ImageIO.read(f);
                    ventana_interna vi = new ventana_interna("Nuevo imagen", this);
                    vi.lienzo1().setImage(img);
                    this.jDesktopPane1.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                }else if(".wav".equals(sub.substring(i)) || ".aiff".equals(sub.substring(i)) || ".au".equals(sub.substring(i))){//audio
                    File nf = new File( dlg.getSelectedFile().getAbsolutePath() ){
                        @Override
                        public String toString(){
                            return this.getName();
                        }
                    };
                    this.listaReproduccion.addItem(nf);
                    this.listaReproduccion.setSelectedItem(nf);
                }else if(".mpg".equals(sub.substring(i))||".mp4".equals(sub.substring(i)) || ".avi".equals(sub.substring(i)) || ".mp3".equals(sub.substring(i))){//video .mpg=clip de pelicula .mp4  .avi   .mp3
                    
                    VentanaInternaJMFPlayer vi  =  VentanaInternaJMFPlayer.getInstance(f);
                    this.jDesktopPane1.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                }else{
                    System.out.println(" extension no reconocida");
                }
            }catch(Exception ex){
            System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
       ventana_interna vi = (ventana_interna)this.jDesktopPane1.getSelectedFrame();
        if(vi != null){
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showOpenDialog(this);
            if( resp == JFileChooser.APPROVE_OPTION) {
               //File f = dlg.getSelectedFile();
               try {
                BufferedImage img = vi.lienzo1().getImage(true);
                    if (img != null) {
                        
                    File f = dlg.getSelectedFile();
                    
                    int i = f.getName().lastIndexOf('.');// indice que nos indica donde empieza la extension
                    String sub = f.getName();
                    sub.substring(i); //aqui tendriamos la extension
                    
                    if(!"png".equals(sub) && img.getColorModel().hasAlpha()){ // si es diferente a png y tenemos alpha, tenemos que guardar como png, avisar
                        ImageIO.write(img, "png", f);
                        System.err.println(" Canal alpha activo, tiene que ser png ");
                    }else if(!"".equals(sub.substring(i)) && extensionesImagen(sub.substring(i))){ //metodo que compruebe que es alguno de los posibles casos
                        ImageIO.write(img, sub.substring(i), f);
                        vi.setTitle(f.getName());
                        System.err.println("guardamos como " + sub.substring(i));
                    }else{
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                        System.err.println(" Lo has guardado sin extension o con una extension no correcta, por defecto ponemos jpg ");
                    }
                }
                }catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_guardarActionPerformed

    public boolean extensionesImagen(String sub){
        boolean salida = false ;
        if("gif".equals(sub) || "jpg".equals(sub) || "png".equals(sub) || "jpeg".equals(sub)){ // comprobar si hay que poner alguno mas...
            salida = true;
        }
        return salida;
    }
    
    private void barra_formasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barra_formasActionPerformed
        if(this.barra_formas.isSelected()){
            this.jPanel1.setVisible(true);
        }else{
            this.jPanel1.setVisible(false);
        }
    }//GEN-LAST:event_barra_formasActionPerformed

    private void barra_atributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barra_atributosActionPerformed
        if(this.barra_atributos.isSelected()){
            this.jPanel5.setVisible(true);
        }else{
            this.jPanel5.setVisible(false);
        }
    }//GEN-LAST:event_barra_atributosActionPerformed

    private void grosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorStateChanged
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setStroke((int) this.grosor.getValue());
    }//GEN-LAST:event_grosorStateChanged

    private void resacaleOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resacaleOPActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(imgSource, imgSource);
                    vi.lienzo1().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_resacaleOPActionPerformed

    private void convolveOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolveOPActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            if(imgSource!=null){
                try{
                    Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgout = cop.filter(imgSource, null);
                    vi.lienzo1().setImage(imgout);
                    vi.lienzo1().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_convolveOPActionPerformed

    private void deslizador_brilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deslizador_brilloFocusGained
        ventana_interna vi = (ventana_interna)(this.jDesktopPane1.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.lienzo1().getImage().getColorModel(); //clonar
            WritableRaster raster = vi.lienzo1().getImage().copyData(null);//clonar cre un raster copia del anterior
            boolean alfaPre = vi.lienzo1().getImage().isAlphaPremultiplied(); //clonar
            imgSourc = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_deslizador_brilloFocusGained

    private void deslizador_brilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deslizador_brilloFocusLost
       imgSourc = null;
       this.deslizador_brillo.setValue(0);
    }//GEN-LAST:event_deslizador_brilloFocusLost

    private void deslizador_brilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_deslizador_brilloStateChanged
         ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            
            if(imgSourc!=null){
                try{
                    RescaleOp rop ;
                    float offsets[];
                    float scaleofset[];
                    int a = imgSourc.getColorModel().getNumColorComponents(); //numero de componentes sin contar alpha
                    int b = imgSourc.getColorModel().getNumComponents(); // numero de componentes contando alpha
                    
                    if(imgSourc.getColorModel().hasAlpha()){ 
                        offsets = new float[b];
                        scaleofset = new float[b];
                        for(int i= 0 ; i < b-1 ; i++){
                            offsets[i] = deslizador_brillo.getValue();
                            scaleofset[i] = 1.0F ;
                        }
                        offsets[b-1] = 1.0F;
                        scaleofset[b-1] = 1.0F ;
                    }else{
                        offsets = new float[a];
                        scaleofset = new float[a];
                        for(int i= 0 ; i < a ; i++){
                            offsets[i] = deslizador_brillo.getValue();
                            scaleofset[i] = 1.0F ;
                        }
                    }
                                  
                    rop = new RescaleOp(scaleofset, offsets, null);
                    rop.filter(imgSourc, vi.lienzo1().getImage());
                    vi.lienzo1().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_deslizador_brilloStateChanged

    private void FiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltrosActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            if(imgSource!=null){
                try{
                        Kernel k = null;
                    switch(this.Filtros.getSelectedIndex()){
                        case 0: // emborronamiento media
                            k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                            break;
                        case 1: // emborronamiento binomial
                            k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                            break;
                        case 2: // enfoque
                            k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                            break;
                        case 3: // relieve
                            k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                            break;
                        case 4: // fronteras laplaciano
                            k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                            break;
                        case 5: // experimento
                            float mascara[]={0.01f,0.01f,0.01f,0.01f,0.01f,
                                            0.01f,0.1f,0.1f,0.1f,0.01f,
                                            0.01f,0.1f,0.04f,0.1f,0.01f,
                                            0.01f,0.1f,0.1f,0.1f,0.01f,
                                            0.01f,0.01f,0.01f,0.01f,0.01f};
                            k = new Kernel(5, 5, mascara);
                            break;
                    }
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgout = cop.filter(imgSource, null);
                    vi.lienzo1().setImage(imgout);
                    vi.lienzo1().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_FiltrosActionPerformed

    private void affine_transfor_OpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affine_transfor_OpActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
            AffineTransformOp op;
            op = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR );
            
            BufferedImage imgdest = op.filter(imgSource, null);
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_affine_transfor_OpActionPerformed

    private void lookup_OpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookup_OpActionPerformed
         ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            LookupTable lt;
            lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
            LookupOp lop = new LookupOp(lt, null);
            BufferedImage imgdest = lop.filter(imgSource, null);
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_lookup_OpActionPerformed

    public LookupTable seno(float w){
        double K = 255.0;
        byte lt[] = new byte[256];
        lt[0]=0;
        for (int l=1; l<256; l++){
            lt[l] = (byte)(K*(abs(sin(toRadians(w)*((double)l)))));
        }
        ByteLookupTable slt = new ByteLookupTable(0,lt);
        return slt;
    }
    
    private void slider_rotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_rotacionStateChanged
        ventana_interna vi = (ventana_interna)(this.jDesktopPane1.getSelectedFrame());
        if(vi!=null){
            if(imgSourc!=null){
                double r = Math.toRadians(this.slider_rotacion.getValue());
                Point c = new Point(imgSourc.getWidth()/2, imgSourc.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage img = atop.filter(imgSourc, null); 
                vi.lienzo1().setImage(img);
                vi.lienzo1().repaint();
            }
        }
    }//GEN-LAST:event_slider_rotacionStateChanged
    private void slider_rotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_slider_rotacionFocusGained
        ventana_interna vi = (ventana_interna)(this.jDesktopPane1.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.lienzo1().getImage().getColorModel(); //clonar
            WritableRaster raster = vi.lienzo1().getImage().copyData(null);//clonar cre un raster copia del anterior
            boolean alfaPre = vi.lienzo1().getImage().isAlphaPremultiplied(); //clonar
            imgSourc = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_slider_rotacionFocusGained

    private void slider_rotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_slider_rotacionFocusLost
        imgSourc = null;
        this.slider_rotacion.setValue(0);
    }//GEN-LAST:event_slider_rotacionFocusLost

    private void aumentar_EscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentar_EscalaActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
        
        AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
        AffineTransformOp atop;
        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
        BufferedImage imgdest = atop.filter(imgSource, null);
        
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
        }
    }//GEN-LAST:event_aumentar_EscalaActionPerformed

    private void disminuir_EscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuir_EscalaActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
        
        AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
        AffineTransformOp atop;
        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
        BufferedImage imgdest = atop.filter(imgSource, null);
        
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
        }
    }//GEN-LAST:event_disminuir_EscalaActionPerformed

    private void contrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            LookupTable lt;
            lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
            LookupOp lop = new LookupOp(lt, null);
            BufferedImage imgdest = lop.filter(imgSource, null);
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_contrasteActionPerformed

    private void iluminacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminacionActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            LookupTable lt;
            lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
            LookupOp lop = new LookupOp(lt, null);
            BufferedImage imgdest = lop.filter(imgSource, null);
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_iluminacionActionPerformed

    private void oscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecerActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            LookupTable lt;
            lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
            LookupOp lop = new LookupOp(lt, null);
            BufferedImage imgdest = lop.filter(imgSource, null);
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_oscurecerActionPerformed

    private void senoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senoActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            LookupTable lt;
            //lt= this.seno(180.0F/255.0F);
            lt = this.util.seno(180.0F/255.0F);
            LookupOp lop = new LookupOp(lt, null);
            BufferedImage imgdest = lop.filter(imgSource, imgSource);
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_senoActionPerformed

    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed
       rotation(90);
    }//GEN-LAST:event_rotacion90ActionPerformed

    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
        rotation(180);
    }//GEN-LAST:event_rotacion180ActionPerformed

    private void rotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270ActionPerformed
        rotation(270);
    }//GEN-LAST:event_rotacion270ActionPerformed
    public void rotation(int roto){
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
        
        double r = Math.toRadians(roto);
        Point c = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
        AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
        AffineTransformOp atop;
        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
        BufferedImage imgdest = atop.filter(imgSource, null);
        
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
        }
    }
    private void nuevo_docActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevo_docActionPerformed
        nuevoActionPerformed(evt);
    }//GEN-LAST:event_nuevo_docActionPerformed

    private void abrir_docActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrir_docActionPerformed
        abrirActionPerformed(evt);
    }//GEN-LAST:event_abrir_docActionPerformed

    private void guardar_docActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_docActionPerformed
        guardarActionPerformed(evt);
    }//GEN-LAST:event_guardar_docActionPerformed

    private void moverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moverActionPerformed
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setEditar(true);
                
        etiqueta_barra_menu.setText("Editar");
        linea.setSelected(false);
        lapiz.setSelected(false);
        rectangulo.setSelected(false);
        ovalo.setSelected(false);
    }//GEN-LAST:event_moverActionPerformed

    private void rellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoActionPerformed
        if (this.relleno.isSelected()){
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setRelleno(true);
        }else{
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setRelleno(false);
        }
    }//GEN-LAST:event_rellenoActionPerformed

    private void transparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaActionPerformed
        if (this.transparencia.isSelected()){
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setComposicion(true);
        }else{
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setComposicion(false);
        }
    }//GEN-LAST:event_transparenciaActionPerformed

    private void alisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarActionPerformed
       if (this.alisar.isSelected()){
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setRender(true);
        }else{
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setRender(false);
        }
    }//GEN-LAST:event_alisarActionPerformed

    private void coloresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coloresActionPerformed
           switch(this.colores.getSelectedIndex()){
                case 0: // negro
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setColor(Color.black);
                    break; 
                case 1: // rojo
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setColor(Color.red);
                    break;    
                case 2: // azul
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setColor(Color.blue);
                    break; 
                case 3: // blanco
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setColor(Color.white);
                    break;                     
                case 4: // amarillo
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setColor(Color.yellow);
                    break; 
                case 5: // verde
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setColor(Color.green);
                    break;                     
            }                   

    }//GEN-LAST:event_coloresActionPerformed

    private void duplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarActionPerformed
        ventana_interna vi = (ventana_interna)(this.jDesktopPane1.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.lienzo1().getImage().getColorModel(); //clonar
            WritableRaster raster = vi.lienzo1().getImage().copyData(null);//clonar cre un raster copia del anterior
            boolean alfaPre = vi.lienzo1().getImage().isAlphaPremultiplied(); //clonar
            BufferedImage img  = new BufferedImage(cm,raster,alfaPre,null);
        
        this.v_interna = new ventana_interna(" duplicado ", this);
        jDesktopPane1.add(v_interna);
        v_interna.lienzo1().setImage(img);
        
        v_interna.setVisible(true);
        v_interna.setBounds(20, 20, img.getWidth(), img.getHeight());
        }
    }//GEN-LAST:event_duplicarActionPerformed

    public BufferedImage getBanda(int iBanda, BufferedImage src){
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        //Creamos el nuevo raster a partir del raster de la imagen original
        int bandList[] = {iBanda};
        WritableRaster bandRaster = (WritableRaster)src.getRaster().createWritableChild(0,0,src.getWidth(), src.getHeight(), 0, 0, bandList);
        //WritableRaster aux = src.getRaster().createCompatibleWritableRaster();
        ComponentColorModel cm = new ComponentColorModel(cs, false, false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);
        BufferedImage imgBanda  = new BufferedImage(cm,bandRaster,false,null);
        /*if(src.getColorModel().hasAlpha()){
            cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
            cm = new ComponentColorModel(cs, true, true,Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);
            boolean alfaPre = src.isAlphaPremultiplied(); //clonar
            imgBanda  = new BufferedImage(cm,aux,alfaPre,null);
        }else{
            cm = new ComponentColorModel(cs, false, false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);
            imgBanda  = new BufferedImage(cm,bandRaster,false,null);
        }*/
        
        return imgBanda;
    }
    
    private void extraccion_bandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraccion_bandasActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            int numero_bandas = imgSource.getColorModel().getNumColorComponents();
            for(int i = 0 ; i < numero_bandas ; i++){
                String nombre = vi.getTitle() + " " + imgSource.getColorModel().getColorSpace().getName(i) ;
                this.v_interna = new ventana_interna(nombre, this);
                jDesktopPane1.add(v_interna);

                //crea una nueva imagen a partir de la imagen que tenemos 
                //BufferedImage img =  getBanda(i,imgSource);
                BufferedImage img =  util.getBanda(i,imgSource);
                v_interna.lienzo1().setImage(img);

                v_interna.setVisible(true);
                v_interna.setBounds(20, 20, img.getWidth(), img.getHeight());
            }                           
        }
    }//GEN-LAST:event_extraccion_bandasActionPerformed
    
    //sepia es componente a componente, da aspecto de viejuno
    private void sepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            if (imgSource != null) {
                try {
                    SepiaOp sepi = new SepiaOp();
                    sepi.filter(imgSource, imgSource);
                    
                    vi.lienzo1().setImage(imgSource);
                    vi.lienzo1().repaint();
                } catch (Exception e) {
                    System.err.println( "No se pudo realizar la operación Sepia ");
                }
            }
        }
    }//GEN-LAST:event_sepiaActionPerformed

    private void band_conbine_OpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_band_conbine_OpActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
                        
            float [][] m = {{1.0F,0.0F,0.0F},{0.0F,0.0F,1.0F},{0.0F,1.0F,0.0F}};
            BandCombineOp bcop = new BandCombineOp( m , null );
            WritableRaster rasterdest = bcop.filter(imgSource.getRaster(),null);
            BufferedImage imgdest = new BufferedImage(imgSource.getColorModel(),rasterdest,false,null);
                      
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_band_conbine_OpActionPerformed

    private void color_convert_opActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_color_convert_opActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
                        
            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
            ColorConvertOp ccop = new ColorConvertOp(cs,null);
            BufferedImage imgdest = ccop.filter(imgSource,null);
                      
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
        
    }//GEN-LAST:event_color_convert_opActionPerformed

    private void espacios_de_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espacios_de_colorActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            
            BufferedImage imgSource = vi.lienzo1().getImage();
            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);
            
            switch(this.espacios_de_color.getSelectedIndex()){
                        case 0: // RGB
                            cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                            break;
                        case 1: // YCC 
                            cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                            break;
                        case 2: // GREY
                            cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                            break;
            }
        
            ColorConvertOp ccop = new ColorConvertOp(cs,null);
            BufferedImage imgdest = ccop.filter(imgSource,null);
                      
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_espacios_de_colorActionPerformed

    private void NegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativoActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            LookupTable lt;
            lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
            LookupOp lop = new LookupOp(lt, null);
            BufferedImage imgdest = lop.filter(imgSource, imgSource);
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_NegativoActionPerformed

    private void propiappActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propiappActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            if (imgSource != null) {
                try {
                    PropioPP prop = new PropioPP();
                    prop.filter(imgSource, imgSource);
                    
                    vi.lienzo1().setImage(imgSource);
                    vi.lienzo1().repaint();
                } catch (Exception e) {
                    System.err.println( "No se pudo realizar la operación Propia ");
                }
            }
        }
    }//GEN-LAST:event_propiappActionPerformed

    private void tintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintadoActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            if (imgSource != null) {
                try {
                    TintOp tintado = new TintOp(Color.red,0.5f);
                    tintado.filter(imgSource, imgSource);
                    
                    vi.lienzo1().setImage(imgSource);
                    vi.lienzo1().repaint();
                } catch (Exception e) {
                    System.err.println( "No se pudo realizar la operación Tintado ");
                }
            }
        }
    }//GEN-LAST:event_tintadoActionPerformed

    private void ecualizadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecualizadorActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            if (imgSource != null) {
                try {
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(imgSource, imgSource);
                    
                    vi.lienzo1().setImage(imgSource);
                    vi.lienzo1().repaint();
                } catch (Exception e) {
                    System.err.println( "No se pudo realizar la operación ecualizar ");
                }
            }
        }
    }//GEN-LAST:event_ecualizadorActionPerformed

    private void binarizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarizaActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            LookupTable lt;
            lt=MlookupOp.createLookupTableBinariza();
            LookupOp lop = new LookupOp(lt, null);
            BufferedImage imgdest = lop.filter(imgSource, imgSource);// null); no le puedes poner null en destino
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_binarizaActionPerformed

    private void posterizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posterizaActionPerformed
         ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            
            LookupTable lt;
            lt=MlookupOp.createLookupTablePosteriza();
            LookupOp lop = new LookupOp(lt, null);
            BufferedImage imgdest = lop.filter(imgSource, imgSource);// null); no le puedes poner null en destino
            vi.lienzo1().setImage(imgdest);
            vi.lienzo1().repaint();
                
        }
    }//GEN-LAST:event_posterizaActionPerformed

    private void propioccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propioccActionPerformed
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo1().getImage();
            if (imgSource != null) {
                try {
                    PropioCC prop = new PropioCC();
                    prop.filter(imgSource, imgSource);
                    
                    vi.lienzo1().setImage(imgSource);
                    vi.lienzo1().repaint();
                } catch (Exception e) {
                    System.err.println( "No se pudo realizar la operación Propia ");
                }
            }
        }
    }//GEN-LAST:event_propioccActionPerformed

    private void Slider_umbralizacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Slider_umbralizacionStateChanged
        ventana_interna vi = (ventana_interna) (this.jDesktopPane1.getSelectedFrame());
        if (vi != null) {
            if (imgSourc != null) {
                try {
                    UmbralizacionOp umbral = new UmbralizacionOp(this.Slider_umbralizacion.getValue()); 
                    BufferedImage img = umbral.filter(imgSourc, null);
                    
                    vi.lienzo1().setImage(img);
                    vi.lienzo1().repaint();
                } catch (Exception e) {
                    System.err.println( "No se pudo realizar la operación Umvralización ");
                }
            }
        }
    }//GEN-LAST:event_Slider_umbralizacionStateChanged

    private void Slider_umbralizacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Slider_umbralizacionFocusGained
        ventana_interna vi = (ventana_interna)(this.jDesktopPane1.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.lienzo1().getImage().getColorModel(); //clonar
            WritableRaster raster = vi.lienzo1().getImage().copyData(null);//clonar cre un raster copia del anterior
            boolean alfaPre = vi.lienzo1().getImage().isAlphaPremultiplied(); //clonar
            imgSourc = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_Slider_umbralizacionFocusGained

    private void Slider_umbralizacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Slider_umbralizacionFocusLost
        imgSourc = null;
        this.slider_rotacion.setValue(0);
    }//GEN-LAST:event_Slider_umbralizacionFocusLost

    private void grabarSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarSonidoActionPerformed
        grabaAudioActionPerformed(evt);
    }//GEN-LAST:event_grabarSonidoActionPerformed

    private void grabaAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabaAudioActionPerformed
        if(this.grabarSonido.isSelected()){    
        JFileChooser dlg = new JFileChooser();
            int resp = dlg.showOpenDialog(this);
            if( resp == JFileChooser.APPROVE_OPTION) {
                File f = dlg.getSelectedFile();
                recorder =  new SMSoundRecorder(f);
                recorder.addLineListener(new ManejadorAudioGrabar());
                recorder.record();
            }
        }else{
            recorder.addLineListener(new ManejadorAudioGrabar());
            recorder.stop();
        }
            
    }//GEN-LAST:event_grabaAudioActionPerformed

    private void playSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSonidoActionPerformed
         File f = (File)listaReproduccion.getSelectedItem();
        
        if(f!=null){
            player =  new SMClipPlayer(f);
            if (player != null) {
                player.addLineListener(new ManejadorAudio());
                player.play();
            }
        }
    }//GEN-LAST:event_playSonidoActionPerformed

    private void stopSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSonidoActionPerformed
        player.addLineListener(new ManejadorAudio());
        player.stop();
    }//GEN-LAST:event_stopSonidoActionPerformed

    private void curvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_curvaActionPerformed
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDibujo(Dibujo.enum_curva);
        etiqueta_barra_menu.setText("Curva");
        curva.setSelected(true);
        areaLuna.setSelected(false);
        trazoLibre.setSelected(false);
        lapiz.setSelected(false);
        linea.setSelected(false);
        rectangulo.setSelected(false);
        ovalo.setSelected(false);
        mover.setSelected(false);
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setEditar(false);
    }//GEN-LAST:event_curvaActionPerformed

    private void trazoLibreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trazoLibreActionPerformed
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDibujo(Dibujo.enum_trazoLibre);
        etiqueta_barra_menu.setText("Trazo libre");
        trazoLibre.setSelected(true);
        areaLuna.setSelected(false);
        curva.setSelected(false);
        lapiz.setSelected(false);
        linea.setSelected(false);
        rectangulo.setSelected(false);
        ovalo.setSelected(false);
        mover.setSelected(false);
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setEditar(false);
    }//GEN-LAST:event_trazoLibreActionPerformed

    private void areaLunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaLunaActionPerformed
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDibujo(Dibujo.enum_propio);
        etiqueta_barra_menu.setText("Propio");
        areaLuna.setSelected(true);
        trazoLibre.setSelected(false);
        curva.setSelected(false);
        lapiz.setSelected(false);
        linea.setSelected(false);
        rectangulo.setSelected(false);
        ovalo.setSelected(false);
        mover.setSelected(false);
        ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setEditar(false);
    }//GEN-LAST:event_areaLunaActionPerformed

    private void gradoTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gradoTransparenciaStateChanged
           if (this.transparencia.isSelected()){//int
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().gradoTransparencia(gradoTransparencia.getValue());
        }else{
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().gradoTransparencia(100);
        }
    }//GEN-LAST:event_gradoTransparenciaStateChanged

    private void discontinuidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discontinuidadActionPerformed
        switch(this.discontinuidad.getSelectedIndex()){
                case 0: // continua
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDiscontinuidad(10);
                    break; 
                case 1: // punteada traza redonda
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDiscontinuidad(BasicStroke.CAP_ROUND);
                    break;    
                case 2: // punteada traza cuadrada
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDiscontinuidad(BasicStroke.CAP_SQUARE);
                    break; 
                case 3: // punteada traza a tope
                    ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setDiscontinuidad( BasicStroke.CAP_BUTT);
                    break;                       
            } 
    }//GEN-LAST:event_discontinuidadActionPerformed

    private void SliderPatronDiscontinuidadStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderPatronDiscontinuidadStateChanged
        if(this.discontinuidad.getSelectedIndex()!=0){
            ((ventana_interna) this.jDesktopPane1.getSelectedFrame()).lienzo1().setPatronDiscontinuidad(this.SliderPatronDiscontinuidad.getValue());
        }
    }//GEN-LAST:event_SliderPatronDiscontinuidadStateChanged

    private void camaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraActionPerformed
        ventanaInternaCamara vi  =  ventanaInternaCamara.getInstance();
        this.jDesktopPane1.add(vi);
        vi.setVisible(true);
    }//GEN-LAST:event_camaraActionPerformed

    private void capturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capturaActionPerformed
        
        FrameGrabbingControl fgc;
        String claseCtr = "javax.media.control.FrameGrabbingControl ";
        fgc = (FrameGrabbingControl)payercaptura.getControlComponent();//.getControl(claseCtr );//******************************************++
        Buffer bufferFrame = fgc.grabFrame();
        BufferToImage bti;
        bti=new BufferToImage((VideoFormat)bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);

        ventana_interna vi = new ventana_interna("Nuevo imagen", this);
        vi.lienzo1().setImage((BufferedImage)img);
        this.jDesktopPane1.add(vi);
        vi.setTitle("captura nueva imagen");
        vi.setVisible(true);
    }//GEN-LAST:event_capturaActionPerformed

    public void setEtiqueta_barra_menu(String text){
        etiqueta_barra_menu.setText(text);
    }
    
    public void setMiVentana(Dibujo dibujo, Boolean relleno,int trazo_grosor,boolean composicion, boolean render, boolean mov){
        ActionEvent evt = null;
        if(dibujo == Dibujo.enum_punto){
            this.lapizActionPerformed(evt);
        }else if(dibujo==Dibujo.enum_linea){
            lineaActionPerformed(evt);
        }else if(dibujo==Dibujo.enum_rectangulo){
            rectanguloActionPerformed(evt);
        }else if(dibujo == Dibujo.enum_elipse){
            ovaloActionPerformed(evt);
        }else if(dibujo==Dibujo.enum_curva){
            this.curvaActionPerformed(evt);
        }else if(dibujo==Dibujo.enum_trazoLibre){
            this.trazoLibreActionPerformed(evt);
        }else if(dibujo == Dibujo.enum_propio){
            this.areaLunaActionPerformed(evt);
        }
        this.relleno.setSelected(relleno);
        this.grosor.setValue(trazo_grosor);
        this.transparencia.setSelected(composicion);
        this.alisar.setSelected(render);
        this.mover.setSelected(mov);
    }
    
    public class ManejadorAudio implements LineListener{

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                playSonido.setEnabled(false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                playSonido.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    
    }
    
        public class ManejadorAudioGrabar implements LineListener{

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                grabarSonido.setEnabled(false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                grabarSonido.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Filtros;
    private javax.swing.JButton Negativo;
    private javax.swing.JSlider SliderPatronDiscontinuidad;
    private javax.swing.JSlider Slider_umbralizacion;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JButton abrir_doc;
    private javax.swing.JMenuItem affine_transfor_Op;
    private javax.swing.JToggleButton alisar;
    private javax.swing.JMenu archivo;
    private javax.swing.JToggleButton areaLuna;
    private javax.swing.JButton aumentar_Escala;
    private javax.swing.JMenuItem band_conbine_Op;
    private javax.swing.JCheckBoxMenuItem barra_atributos;
    private javax.swing.JCheckBoxMenuItem barra_estado;
    private javax.swing.JCheckBoxMenuItem barra_formas;
    private javax.swing.JButton binariza;
    private javax.swing.JButton camara;
    private javax.swing.JButton captura;
    private javax.swing.JMenuItem color_convert_op;
    private javax.swing.JComboBox<Color> colores;
    private javax.swing.JButton contraste;
    private javax.swing.JMenuItem convolveOP;
    private javax.swing.JToggleButton curva;
    private javax.swing.JSlider deslizador_brillo;
    private javax.swing.JComboBox<String> discontinuidad;
    private javax.swing.JButton disminuir_Escala;
    private javax.swing.JMenuItem duplicar;
    private javax.swing.JButton ecualizador;
    private javax.swing.JMenu edicion;
    private javax.swing.JComboBox<String> espacios_de_color;
    private javax.swing.JLabel etiqueta_barra_menu;
    private javax.swing.JButton extraccion_bandas;
    private javax.swing.JMenuItem grabaAudio;
    private javax.swing.JToggleButton grabarSonido;
    private javax.swing.JSlider gradoTransparencia;
    private javax.swing.JSpinner grosor;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JButton guardar_doc;
    private javax.swing.JButton iluminacion;
    private javax.swing.JMenu imagen;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToggleButton lapiz;
    private javax.swing.JToggleButton linea;
    private javax.swing.JComboBox<File> listaReproduccion;
    private javax.swing.JMenuItem lookup_Op;
    private javax.swing.JToggleButton mover;
    private javax.swing.JMenuItem nuevo;
    private javax.swing.JButton nuevo_doc;
    private javax.swing.JButton oscurecer;
    private javax.swing.JToggleButton ovalo;
    private javax.swing.JButton playSonido;
    private javax.swing.JButton posteriza;
    private javax.swing.JButton propiapp;
    private javax.swing.JButton propiocc;
    private javax.swing.JToggleButton rectangulo;
    private javax.swing.JToggleButton relleno;
    private javax.swing.JMenuItem resacaleOP;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion270;
    private javax.swing.JButton rotacion90;
    private javax.swing.JButton seno;
    private javax.swing.JButton sepia;
    private javax.swing.JSlider slider_rotacion;
    private javax.swing.JButton stopSonido;
    private javax.swing.JButton tintado;
    private javax.swing.JToggleButton transparencia;
    private javax.swing.JToggleButton trazoLibre;
    // End of variables declaration//GEN-END:variables
    private practicafinalsmm.ventana_interna externa;
    private practicafinalsmm.ventana_interna v_interna;
    private BufferedImage imgSourc;
    private utilities util;
    SMClipPlayer player = null;
    SMSoundRecorder recorder = null;
    FrameGrabbingControl payercaptura;
}
/*        ventana_interna vi = new ventana_interna("Nuevo imagen", this);
        cambiar por ventanainternasm vi = ...
         img.getImagen
           if(img!=null){
            ..............
            }

*/